var documenterSearchIndex = {"docs":
[{"location":"#MortalityTables.jl","page":"Home","title":"MortalityTables.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using MortalityTables\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MortalityTables]","category":"page"},{"location":"#MortalityTables.Balducci","page":"Home","title":"MortalityTables.Balducci","text":"Balducci()\n\nA DeathDistribution type that assumes a decreasing force of mortality over the year.\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Beard","page":"Home","title":"MortalityTables.Beard","text":"Beard(a,b,k)\n\nConstruct a mortality model following Beard's law of mortality.\n\nDefault args:\n\na = 0.002\nb = 0.13\nk = 1.\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Constant","page":"Home","title":"MortalityTables.Constant","text":"Constant()\n\nA DeathDistribution type that assumes a constant force of mortality over the year.\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.DeathDistribution","page":"Home","title":"MortalityTables.DeathDistribution","text":"DeathDistribution\n\nAn abstract type used to form an assumption of how deaths occur throughout a     year. See Balducci(), Uniform(), and Constant() for concrete     assumption types.\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.GammaGompertz","page":"Home","title":"MortalityTables.GammaGompertz","text":"GammaGompertz(a,b,γ)\n\nConstruct a mortality model following GammaGompertz law of mortality.\n\nDefault args:\n\na = 0.002\nb = 0.13\nγ = 1\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.HeligmanPollard","page":"Home","title":"MortalityTables.HeligmanPollard","text":"HeligmanPollard(a,b,c,d,e,f,g,h)\n\nConstruct a mortality model following HeligmanPollard law of mortality with 8 parameters.\n\nDefault args:\n\na = 0.0002\nb = 0.13\nc = 0.001\nd = 0.001\ne = 0.013\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.HeligmanPollard2","page":"Home","title":"MortalityTables.HeligmanPollard2","text":"HeligmanPollard2(a,b,c,d,e,f,g,h)\n\nConstruct a mortality model following HeligmanPollard (alternate) law of mortality with 8 parameters.\n\nDefault args:\n\na = .0005\nb = .004\nc = .08\nd = .001\ne = 10\nf = 17\ng = .00005\nh = 1.1\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.HeligmanPollard3","page":"Home","title":"MortalityTables.HeligmanPollard3","text":"HeligmanPollard3(a,b,c,d,e,f,g,h,k)\n\nConstruct a mortality model following HeligmanPollard (alternate) law of mortality with 9 parameters.\n\nDefault args:\n\na = .0005\nb = .004\nc = .08\nd = .001\ne = 10\nf = 17\ng = .00005\nh = 1.1\nk= 1.\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.HeligmanPollard4","page":"Home","title":"MortalityTables.HeligmanPollard4","text":"HeligmanPollard4(a,b,c,d,e,f,g,h,k)\n\nConstruct a mortality model following HeligmanPollard (alternate) law of mortality with 9 parameters.\n\nDefault args:\n\na = .0005\nb = .004\nc = .08\nd = .001\ne = 10\nf = 17\ng = .00005\nh = 1.1\nk= 1.\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.InverseGompertz","page":"Home","title":"MortalityTables.InverseGompertz","text":"InverseGompertz(;a,b,c)\n\nConstruct a mortality model following InverseGompertz's law.\n\nDefault args:\n\nm = 49\nσ = 7.7\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.InverseWeibull","page":"Home","title":"MortalityTables.InverseWeibull","text":"InverseWeibull(m,σ)\n\nConstruct a mortality model following Weibull's law of mortality.\n\nThe Inverse-Weibull proves useful for modelling the childhood and teenage years, because the logarithm of h(x) is a concave function.\n\nm >0 is a measure of location\nσ >0 is measure of dispersion\n\nDefault args:\n\nm = 5\nσ = 10\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Kannisto","page":"Home","title":"MortalityTables.Kannisto","text":"Kannisto(a,b)\n\nConstruct a mortality model following Kannisto's law of mortality.\n\nDefault args:\n\na = 0.5\nb = 0.13\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.KannistoMakeham","page":"Home","title":"MortalityTables.KannistoMakeham","text":"KannistoMakeham(a,b,c)\n\nConstruct a mortality model following KannistoMakeham's law of mortality.\n\nDefault args:\n\na = 0.5\nb = 0.13\nc = 0.001\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Kostaki","page":"Home","title":"MortalityTables.Kostaki","text":"Kostaki(a,b,c,d,e1,e2,f,g,h)\n\nConstruct a mortality model following Kostaki's law of mortality. A nine-parameter adaptation of HeligmanPollard.\n\nKostaki, A. (1992). A nine‐parameter version of the Heligman‐Pollard formula. Mathematical Population Studies, 3(4), 277–288. doi:10.1080/08898489209525346 \n\nDefault args:\n\na = 0.0005\nb = 0.01\nc = 0.10\nd = 0.001\ne1 = 3.\ne2 = 0.1\nf = 25.\ng = .00005\nh = 1.1\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Makeham","page":"Home","title":"MortalityTables.Makeham","text":"Makeham(;a,b,c)\n\nConstruct a mortality model following Makeham's law.\n\nDefault args:\n\na = 0.0002\nb = 0.13\nc = 0.001\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.MakehamBeard","page":"Home","title":"MortalityTables.MakehamBeard","text":"MakehamBeard(a,b,c,k)\n\nConstruct a mortality model following MakehamBeard's law of mortality.\n\nDefault args:\n\na = 0.002\nb = 0.13\nc = 0.01\nk = 1.\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Martinelle","page":"Home","title":"MortalityTables.Martinelle","text":"Martinelle(a,b,c,d,k)\n\nConstruct a mortality model following Martinelle's law of mortality.\n\nDefault args:\n\na = 0.001\nb = 0.13\nc = 0.001\nd = 0.1\nk = 0.001\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.MortalityTable","page":"Home","title":"MortalityTables.MortalityTable","text":"MortalityTable(ultimate)\nMortalityTable(select, ultimate)\nMortalityTable(select, ultimate; metadata::MetaData)\n\nConstructs a container object which can hold either:     - ultimate-only rates (an UltimateTable)     - select and ultimate rates (a SelectUltimateTable)\n\nAlso pass a keyword argument metadata=MetaData(...) to store relevant information (source, notes, etc) about the table itself.\n\nExamples\n\n# first construct the underlying data\nult = UltimateMortality([x / 100 for x in 0:100]); # first ma\nmatrix = rand(10,50); # represents random mortality rates with a select period of 10 years\nsel = SelectMortality(matrix,ult,start_age=0);\n\ntable = MortalityTable(sel,ult)\n\n# can now get rates, indexed by attained age:\n\ntable.select[10] # the vector of rates for a risk issued select at age 10 \n\ntable.ultimate[99] # 0.99\n\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Opperman","page":"Home","title":"MortalityTables.Opperman","text":"Opperman(a,b,c)\n\nConstruct a mortality model following Opperman's law of mortality.\n\nDefault args:\n\na = 0.04\nb = 0.0004\nc = 0.001\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Perks","page":"Home","title":"MortalityTables.Perks","text":"Perks(a,b,c,d)\n\nConstruct a mortality model following Perks' law of mortality.\n\nDefault args:\n\na = 0.002\nb = 0.13\nc = 0.01\nd = 0.01\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Quadratic","page":"Home","title":"MortalityTables.Quadratic","text":"Quadratic(a,b,c)\n\nConstruct a mortality model following Quadratic law of mortality.\n\nDefault args:\n\na = 0.01\nb = 1.\nc = 0.01\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.RogersPlanck","page":"Home","title":"MortalityTables.RogersPlanck","text":"RogersPlanck(a₀, a₁, a₂, a₃, a, b, c, d, u)\n\nConstruct a mortality model following RogersPlanck law of mortality.\n\nDefault args:\n\na₀ = 0.0001\na₁ = 0.02\na₂ = 0.001\na₃ = 0.0001\na  = 2.\nb  = 0.001\nc  = 100.\nd  = 0.1\nu  = 0.33\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Siler","page":"Home","title":"MortalityTables.Siler","text":"Siler(a,b,c,d,e)\n\nConstruct a mortality model following Siler law of mortality.\n\nDefault args:\n\na = 0.0002\nb = 0.13\nc = 0.001\nd = 0.001\ne = 0.013\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.StrehlerMildvan","page":"Home","title":"MortalityTables.StrehlerMildvan","text":"StrehlerMildvan(k,v₀,b,d)\n\nConstruct a mortality model following StrehlerMildvan's law of mortality.\n\nDefault args:\n\nk   = 0.01\nv₀  = 2.5\nb   = 0.2\nd   = 6.0\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.TableMetaData","page":"Home","title":"MortalityTables.TableMetaData","text":"TableMetaData(kwargs...)\n\nHas the following fields, which default to nothing if not specified with a keyword:\n\nname - a name for the table\nid - if a mort.SOA.org sourced table, will be the identifying table ID\nprovider - Where the rates came from\nreference - Source for more info on table\ncontent_type\ndescription\ncomments\nsource_path\n\nWhen you call a MortalityTable interactively, it will nicely print this summary infomration.\n\nExample content from mort.SOA.org:\n\nTable Identity: 1076\nProvider Domain: actuary.org\nProvider Name: American Academy of Actuaries\nTable Reference: Tillinghast, “American Council of Life Insurers: Preferred Version of 2001 CSO Mortality Tables”, ...\nContent Type: CSO/CET\nTable Name: 2001 CSO Super Preferred Select and Ultimate - Male Nonsmoker, ANB\nTable Description: 2001 Commissioners Standard Ordinary (CSO) Super Preferred Select and Ultimate Table – Male Nonsmoker. Basis: Age Nearest Birthday. Minimum Select Age: 0. Maximum Select Age: 99. Minimum Ultimate Age: 16. Maximum Ultimate Age: 120\nComments: Study Data: A preferred version of the 2001 Commissioners Standard Ordinary (CSO) table ...\n\nAnd the source_path would be: https://mort.soa.org/ViewTable.aspx?&TableIdentity=1076\n\nExample usage:\n\njulia-repl> TableMetaData(name=\"My Table Name\")\nTableMetaData(\"My Table Name\", nothing, nothing, nothing, nothing, nothing, nothing, nothing)\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Thiele","page":"Home","title":"MortalityTables.Thiele","text":"Thiele(a,b,c,d,e,f,g)\n\nConstruct a mortality model following Opperman's law of mortality.\n\nDefault args:\n\na = 0.02474 \nb = 0.3\nc = 0.004\nd = 0.5\ne = 25\nf = 0.0001\ng = 0.13\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Uniform","page":"Home","title":"MortalityTables.Uniform","text":"Uniform()\n\nA DeathDistribution type that assumes an increasing force of mortality over the year.\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.VanderMaen","page":"Home","title":"MortalityTables.VanderMaen","text":"VanderMaen(a,b,c,i,n)\n\nConstruct a mortality model following VanderMaen's law of mortality.\n\nDefault args:\n\na = 0.01\nb = 1\nc = 0.01\ni = 100\nn = 200\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.VanderMaen2","page":"Home","title":"MortalityTables.VanderMaen2","text":"VanderMaen2(a,b,i,n)\n\nConstruct a mortality model following VanderMaen2's law of mortality.\n\nDefault args:\n\na = 0.01\nb = 1\ni = 100\nn = 200\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Weibull","page":"Home","title":"MortalityTables.Weibull","text":"Weibull(m,σ)\n\nConstruct a mortality model following Weibull's law of mortality.\n\nNote that if σ > m, then the mode of the density is 0 and hx is a non-increasing function of x, while if σ < m, then the mode is greater than 0 and hx is an increasing function. \n\nm >0 is a measure of location\nσ >0 is measure of dispersion\n\nDefault args:\n\nm = 1\nσ = 2\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Wittstein","page":"Home","title":"MortalityTables.Wittstein","text":"Wittstein(a,b,m,n)\n\nConstruct a mortality model following Wittstein's law of mortality.\n\nDefault args:\n\na = 1.5\nb = 1.\nn = 0.5\nm = 100\n\n\n\n\n\n","category":"type"},{"location":"#MortalityTables.Gompertz-Tuple{}","page":"Home","title":"MortalityTables.Gompertz","text":"Gompertz(a,b)\n\nConstruct a mortality model following Gompertz' law of mortality.\n\nThis is a special case of Makeham's law and will Makeham model where c=0.\n\nDefault args:\n\na = 0.0002\nb = 0.13\n\n\n\n\n\n","category":"method"},{"location":"#MortalityTables.SelectMortality-Tuple{Any,Any}","page":"Home","title":"MortalityTables.SelectMortality","text":"SelectMortality(select, ultimate; start_age=0)\n\nGiven a matrix rates, where the first row represents the select rates for a risk, will create a an OffsetArray that is indexed by issue age, containing a vector of rate indexed by attained age. The ultimate mortality vector is used for rates in the post-select period.\n\nGive the optional keyword argument to start the indexing at an age other than zero.\n\nExamples\n\njulia> ult = UltimateMortality([x / 100 for x in 0:100]);\n\njulia> matrix = rand(50,10); # represents random(!) mortality rates with a select period of 10 years\n\njulia> sel = SelectMortality(matrix,ult,start_age=0);\n\njulia> sel[0] # the mortality vector for a select life with issue age 0\n 0.12858960119349439\n 0.1172480189376135\n 0.8237661916705163\n ⋮\n 0.98\n 0.99\n 1.0\n\njulia> sel[0][95] # the mortality rate for a life age 95, that was issued at age 0\n0.95\n\n\n\n\n\n","category":"method"},{"location":"#MortalityTables.UltimateMortality-Tuple{Array{#s23,1} where #s23<:Real}","page":"Home","title":"MortalityTables.UltimateMortality","text":"UltimateMortality(vector; start_age=0)\n\nGiven a vector of rates, returns an OffsetArray that is indexed by attained age. \n\nGive the optional keyword argument to start the indexing at an age other than zero.\n\nExamples\n\njulia> m = UltimateMortality([0.1,0.3,0.6,1]);\n\njulia> m[0]\n0.1\n\njulia> m = UltimateMortality([0.1,0.3,0.6,1], start_age = 18);\n\njulia> m[18]\n0.1\n\n\n\n\n\n\n","category":"method"},{"location":"#MortalityTables.decrement-Tuple{Any,Any}","page":"Home","title":"MortalityTables.decrement","text":"decrement(mortality_vector,to_age)\ndecrement(mortality_vector,from_age,to_age)\n\nReturns the cumulative decrement through attained age to_age. The start of the calculation is either the start of the vector, or attainedage `fromage.fromageandtoage` need to be Integers. Add a DeathDistribution as the last argument to handle floating point and non-whole ages:\n\ndecrement(mortality_vector,to_age,::DeathDistribution)\ndecrement(mortality_vector,from_age,to_age,::DeathDistribution)\n\nExamples\n\njulia> qs = UltimateMortality([0.1,0.3,0.6,1]);\n    \njulia> decrement(qs,0)\n0.0\njulia> decrement(qs,1)\n0.1\n\njulia> decrement(qs,1,1)\n0.0\njulia> decrement(qs,1,2)\n0.3\n\njulia> decrement(qs,0.5,Uniform())\n0.05\n\n\n\n\n\n","category":"method"},{"location":"#MortalityTables.get_SOA_table!-Tuple{Any,Int64}","page":"Home","title":"MortalityTables.get_SOA_table!","text":"get_SOA_table!(dict,id)\n\nWill lookup the given mortality table and add it to the given dict, with the name of the table acting as the added key in the dictionary.\n\nThis modifies the given dict (as is indicated by the conventional ! at the end of the function name).\n\n!! Remember that not all tables have been tested to work.\n\n\n\n\n\n","category":"method"},{"location":"#MortalityTables.get_SOA_table-Tuple{Int64}","page":"Home","title":"MortalityTables.get_SOA_table","text":"get_SOA_table(id)\n\nGiven the id of a mort.SOA.org table, grab it and return it as a MortalityTable.\n\n!! Remember that not all tables have been tested to work.\n\n\n\n\n\n","category":"method"},{"location":"#MortalityTables.omega-Tuple{Any}","page":"Home","title":"MortalityTables.omega","text":"omega(x)\nω(x)\n\nReturns the last index of the given vector. For mortality vectors this means the last attained age for which a rate is defined.\n\nω is aliased to omega, but unexported. To use, do using MortalityTables: ω when importing or call MortalityTables.ω()\n\nExamples\n\njulia> qs = UltimateMortality([0.1,0.3,0.6,1]);\njulia> omega(qs)\n3\n\njulia> qs = UltimateMortality([0.1,0.3,0.6,1],start_age=10);\njulia> omega(qs)\n13\n\n\n\n\n\n\n","category":"method"},{"location":"#MortalityTables.readXTbML-Tuple{Any}","page":"Home","title":"MortalityTables.readXTbML","text":"readXTbML(path)\n\nLoads the [XtbML](https://mort.soa.org/About.aspx) (the SOA XML data format for mortality tables) stored at the given path and returns a `MortalityTable`.\n\n\n\n\n\n","category":"method"},{"location":"#MortalityTables.survival-Tuple{Any,Any}","page":"Home","title":"MortalityTables.survival","text":"survival(mortality_vector,to_age)\nsurvival(mortality_vector,from_age,to_age)\n\nReturns the survival through attained age to_age. The start of the calculation is either the start of the vector, or attainedage `fromage.fromageandtoage` need to be Integers. Add a DeathDistribution as the last argument to handle floating point and non-whole ages:\n\nsurvival(mortality_vector,to_age,::DeathDistribution)\nsurvival(mortality_vector,from_age,to_age,::DeathDistribution)\n\nIf given a negative to_age, it will return 1.0. Aside from simplifying the code, this makes sense as for something to exist in order to decrement in the first place, it must have existed and surived to the point of  being able to be decremented.\n\nExamples\n\njulia> qs = UltimateMortality([0.1,0.3,0.6,1]);\n    \njulia> survival(qs,0)\n1.0\njulia> survival(qs,1)\n0.9\n\njulia> survival(qs,1,1)\n1.0\njulia> survival(qs,1,2)\n0.7\n\njulia> survival(qs,0.5,Uniform())\n0.95\n\n\n\n\n\n","category":"method"},{"location":"#MortalityTables.tables","page":"Home","title":"MortalityTables.tables","text":"tables(dir=nothing)\n\nLoads the XtbML (the SOA XML data format for mortality tables) stored in the given path. If no path is specified, will load the packages in the MortalityTables package directory. To see where your system keeps packages, run DEPOT_PATH from a Julia REPL.\n\n\n\n\n\n","category":"function"},{"location":"#MortalityTables.μ-Tuple{MortalityTables.ParametricMortality,Any}","page":"Home","title":"MortalityTables.μ","text":"μ(m::ParametricMortality,age)\n\nmu_x: Return the force of mortality at the given age. \n\n\n\n\n\n","category":"method"}]
}
